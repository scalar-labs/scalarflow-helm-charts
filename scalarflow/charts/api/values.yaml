# Default values for scalarflow.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

api:
  replicaCount: 1
  image:
    repository: ghcr.io/scalar-labs/scalarflow-api
    pullPolicy: IfNotPresent
    tag: 1.0.0

  schemaLoader:
    image:
      repository: ghcr.io/scalar-labs/scalarflow-schema-loader
      pullPolicy: IfNotPresent
      tag: 1.0.0
    # This will clean the schema loader job after the job is finished (either completed or failed) after a set number of seconds. "0" means disable this feature (the job is not cleaned).
    ttlSecondsAfterFinished: 60
    # Arguments for the scalarflow schema loader
    args: []

  configMouthPath: /scalarflow
  springBootProfile: production

  service:
    type: ClusterIP
    port: 8080

  springBootConfig:
    name: application.yml
    # file data which will be passed via --set-file flag when install the chart
    data: ""

  spring:
    security:
      oauth2:
        resourceServer:
          jwt:
            issuerUri: ""

  server:
    port: 8080

  scalardb:
    config: scalardb.properties
    configData: ""
    # In the case the properties file is not used, then the configuration can be done via bellow configs
    namespace: scalarflow
    contactPoint: "scalardb-server-envoy"
    contactPort: 60051
    storage: grpc
    transactionManager: grpc

  app:
    storage:
      templateRootFolderId: ""
      workflowRootFolderId: ""
      workareaRootFolderId: ""
    url: ""
    company:
      id: ""
      name: ""
      description: ""
    selfSignUp:
      enabled: false
      defaultPermissions: ""
    templatePath: /scalarflow/templates/
    adminUser:
      email: ""
      password: ""
      firstName: "ScalarFlow"
      lastName: "Admin"
      phoneNumber: ""

  storage:
    box:
      enabled: false
      config: box-config.json
      configData: ""
      groupId: ""
      # In the case the config file is not used, please using bellow configs
      clientId: ""
      clientSecret: ""
      publicKeyId: ""
      privateKey: ""
      passphrase: ""
      enterpriseId: ""
    jclouds:
      enabled: false
      container: ""
      identity: ""
      credential: ""
      provider: AWS

  springdoc:
    documentation:
      enabled: false

  sms:
    twilio:
      enabled: false
      accountSid: ""
      token: ""
      phoneNumber: ""
    awsSns:
      enabled: false
      accessKey: ""
      secretKey: ""
      region: "ap-northeast-1"
    templates:
      mfa:
        body: ""

  email:
    from: ""
    sendgrid:
      enabled: false
      apiKey: ""
    awsSes:
      enabled: false
      accessKey: ""
      secretKey: ""
      region: "ap-northeast-1"
    templates:
      externalUserAccessRequest:
        subject: ""
        templateId: ""
        textBody: ""
        htmlBody: ""
      externalUserAccessTask:
        subject: ""
        templateId: ""
        textBody: ""
        htmlBody: ""
      verificationCode:
        subject: ""
        templateId: ""
        textBody: ""
        htmlBody: ""
      createdUser:
        subject: ""
        templateId: ""
        textBody: ""
        htmlBody: ""
      mfa:
        subject: ""
        templateId: ""
        textBody: ""
        htmlBody: ""

  crypto:
    keyPair:
      privateKey: ""
      publicKey: ""

  p2p:
    enabled: false
    thisPeerHost: ""
    messageExpirationInSecs: 60

  authentication:
    providers:
      staticJwt:
        enabled: false
      awsCognito:
        enabled: false
        accessKey: ""
        secretKey: ""
        region: "ap-northeast-1"
        userPoolId: ""
        clientId: ""
      oauth2:
        google:
          enabled: false
          authUri: ""
          redirectUri: ""
          clientId: ""
          clientSecret: ""
        box:
          enabled: false
          authUri: ""
          redirectUri: ""
          clientId: ""
          clientSecret: ""
    mfa:
      required: false
      email:
        enabled: false
      sms:
        enabled: false
    password:
      minCharacterLength: 8
      numberRequired: true
      upperCaseRequired: true
      lowerCaseRequired: true
      specialCharacterRequired: false
    staticJwt:
      secret: ""
      expirationTimeMinutes: 60
      issuerUri: ""
      refreshTokenExpirationDays: 30
    security:
      forgotPasswordAttemptLimit: 3
      forgotPasswordRetryMinutes: 5
      failedAuthenticationAttemptLimit: 5
      failedAuthenticationRetryMinutes: 5
    verificationCode:
      verificationCodeLength: 6
      verificationCodeExpirationInMinutes: 5

  sentry:
    dsn: ""
    debug: false
    tracesSampleRate: 1.0
    environment: "production"
    release: ""

imagePullSecrets:
  - name: regcred

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

ingress:
  enabled: false
  className: ""
  annotations: 
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: ""
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
